"""
Django settings for community project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '1_52o3mure#b=!jna&&+4e!618#0ru4kgl7_jv+7dal-u36+nq'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['eb-community-dev.ap-northeast-1.elasticbeanstalk.com']
ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'home',
    'authentication',
    'crispy_forms',
    'user_profile',
    'questions',
    'django.contrib.humanize',
    'search',
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'
# 这个第三方插件在模板引用时只需在模板头部加入{% load crispy_forms_tags %}，使用时在表单后面选择自己喜欢的样式，
# 例如：{{ form | crispy }}。

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'community.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'community.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',  # 指定连接 MySQL
#         'NAME': 'mysql',  # 刚刚创建的数据库
#         'USER': 'root',  # 使用 root 账户
#         'PASSWORD': '123456abc',  # 因为实验楼环境中的 MySQL 没有密码，所以这里为空
#         'HOST': '127.0.0.1',
#         'PORT': '3306',  # MySQL 的固定端口号
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 指定连接 MySQL
        'NAME': 'ebdb',  # 刚刚创建的数据库
        'USER': 'qiulongquan',  # 使用 root 账户
        'PASSWORD': '123456abc',  # 因为实验楼环境中的 MySQL 没有密码，所以这里为空
        'HOST': 'aal90r2pyvrq9e.cqnfpkbdck9a.ap-northeast-1.rds.amazonaws.com',
        'PORT': '3306',  # MySQL 的固定端口号
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 指定项目用户模型
# 最后，在根目录community\settings.py中将默认用户模型指定为自定义模型：
AUTH_USER_MODEL = 'authentication.User'

# django.contrib.auth.urls
# 用于使用了 Django 自带的用户认证模块auth_views中的LoginView和LogoutView，
# 在community/settings.py中需要指定其url和完成操作后的重定向操作：

LOGIN_URL = 'login'
LOGOUT_URL = 'logout'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media').replace('\\', '/')
